# ----------------------------------------------------------------------------

grammar: UID
grammar: HEADER UID

Either a declaration or %% is expected at this point.

# ----------------------------------------------------------------------------

grammar: TYPE UID
grammar: TYPE OCAMLTYPE TYPE
grammar: TYPE OCAMLTYPE UID PREC
grammar: TYPE OCAMLTYPE UID LPAREN TYPE
grammar: TYPE OCAMLTYPE UID COMMA TYPE
grammar: TYPE OCAMLTYPE UID LPAREN UID UID
grammar: TYPE OCAMLTYPE UID LPAREN UID COMMA TYPE
grammar: TYPE OCAMLTYPE UID PLUS RPAREN
grammar: ON_ERROR_REDUCE TYPE

# %type<ocamltype> and %on_error_reduce are both followed with clist(strict_actual),
# so they are not distinguished in the automaton.

Ill-formed declaration.
Examples of well-formed declarations:
  %type <Syntax.expression> expression
  %type <int> date time
  %type <int option> option(date)
  %on_error_reduce expression
  %on_error_reduce date time
  %on_error_reduce option(date)

# ----------------------------------------------------------------------------

grammar: TOKEN TYPE
grammar: TOKEN OCAMLTYPE TYPE
grammar: TOKEN UID STAR
grammar: TOKEN UID COMMA TYPE
grammar: TOKEN UID ATTRIBUTE STAR

Ill-formed %token declaration.
Examples of well-formed declarations:
  %token FOO
  %token DOT SEMICOLON
  %token <string> LID UID
  %token FOO [@cost 0]

# ----------------------------------------------------------------------------

grammar: START UID
grammar: START OCAMLTYPE LEFT
grammar: START LID UID
grammar: START LID COMMA UID

Ill-formed %start declaration.
A start symbol must begin with a lowercase letter.
Examples of well-formed declarations:
  %start program
  %start expression phrase
  %start <int> date time

# ----------------------------------------------------------------------------

grammar: RIGHT TYPE
grammar: RIGHT UID STAR
grammar: RIGHT UID COMMA TYPE

Ill-formed precedence declaration.
Examples of well-formed declarations:
  %left PLUS
  %left PLUS MINUS
  %nonassoc unary_minus
  %right CONCAT

# ----------------------------------------------------------------------------

grammar: PARAMETER UID

Ill-formed %parameter declaration.
Examples of well-formed declarations:
  %parameter <X : sig type t end>

# ----------------------------------------------------------------------------

grammar: PERCENTPERCENT TYPE

Either a rule or %% is expected at this point.

# ----------------------------------------------------------------------------

grammar: PERCENTPERCENT UID COLON ACTION TYPE

Either another rule or %% is expected at this point.

# ----------------------------------------------------------------------------

grammar: PERCENTPERCENT PUBLIC TYPE
grammar: PERCENTPERCENT INLINE TYPE
grammar: PERCENTPERCENT PUBLIC INLINE TYPE

Ill-formed rule.
%inline, %public, or a non-terminal symbol is expected at this point.
Examples of well-formed rules:
  %public option(X): { None } | x = X { Some x }
  %inline clist(X): xs = separated_nonempty_list(COMMA?, X) { xs }
  %public %inline pair(X, Y): x = X; y = Y { (x, y) }

# ----------------------------------------------------------------------------

grammar: PERCENTPERCENT UID UID
grammar: PERCENTPERCENT LID ATTRIBUTE UID

Ill-formed rule.
Either a parenthesized, comma-delimited list of formal parameters
or an attribute
or a colon is expected at this point.
Examples of well-formed rules:
  main: e = expr EOL { e }
  expr: i = INT { i } | e1 = expr PLUS e2 = expr { e1 + e2 }
  option(X): { None } | x = X { Some x }
  main [@cost 0]: e = expr EOL { e }

# ----------------------------------------------------------------------------

grammar: PERCENTPERCENT UID LPAREN TYPE
grammar: PERCENTPERCENT UID LPAREN UID UID
grammar: PERCENTPERCENT UID LPAREN UID COMMA TYPE

Ill-formed rule.
A comma-delimited list of formal parameters is expected at this point.
Examples of well-formed rules:
  option(X): { None } | x = X { Some x }
  pair(X, Y): x = X; y = Y { (x, y) }

# ----------------------------------------------------------------------------

grammar: PERCENTPERCENT UID COLON TYPE
grammar: PERCENTPERCENT UID COLON BAR TYPE
grammar: PERCENTPERCENT UID COLON ACTION BAR TYPE
grammar: PERCENTPERCENT UID COLON UID BAR TYPE

Ill-formed rule.
A list of productions is expected at this point.
Examples of well-formed rules:
  main: e = expr EOL { e }
  expr: i = INT { i } | e1 = expr PLUS e2 = expr { e1 + e2 }
  symbol: s = LID | s = UID { s }

# ----------------------------------------------------------------------------

grammar: PERCENTPERCENT UID COLON UID TYPE
grammar: PERCENTPERCENT UID COLON UID ATTRIBUTE TYPE
grammar: PERCENTPERCENT UID COLON LID TYPE
grammar: PERCENTPERCENT UID COLON LID EQUAL TYPE
grammar: PERCENTPERCENT UID COLON UID PLUS TYPE
grammar: PERCENTPERCENT UID COLON LID EQUAL UID PLUS TYPE

Ill-formed production.
A production is a sequence of producers, followed with a semantic action.
Examples of well-formed producers:
  expr
  option(COMMA)
  separated_list(COMMA, expr)
  e = expr
  ds = declaration*
  es = list(terminated(expr, SEMI))
  es = list(e = expr SEMI { e })
  xs = list(x = var { Some x } | WILDCARD { None })
  expr [@cost 0]

# The following sentences are similar, but have an open parenthesis.
# Suggesting that a parenthesis could be closed seems a safe bet. These
# sentences are otherwise tricky. In front of us could be many things (comma,
# closing parenthesis, identifier, modifier, %prec keyword, etc.). We expect
# to reduce to actual or lax_actual. Let's just back up to a safe level of
# abstraction and say this is an ill-formed production.

grammar: PERCENTPERCENT UID COLON UID LPAREN UID TYPE
grammar: PERCENTPERCENT UID COLON UID LPAREN UID STAR TYPE
grammar: PERCENTPERCENT UID COLON UID LPAREN UID LPAREN LID RPAREN TYPE
grammar: PERCENTPERCENT UID COLON UID LPAREN LID TYPE
grammar: PERCENTPERCENT UID COLON UID LPAREN ACTION BAR TYPE

Ill-formed production.
Maybe you meant to close a parenthesis at this point?
A production is a sequence of producers, followed with a semantic action.
Examples of well-formed producers:
  expr
  option(COMMA)
  separated_list(COMMA, expr)
  e = expr
  ds = declaration*
  es = list(terminated(expr, SEMI))
  es = list(e = expr SEMI { e })
  xs = list(x = var { Some x } | WILDCARD { None })

# ----------------------------------------------------------------------------

grammar: PERCENTPERCENT UID COLON UID LPAREN ACTION UID
# In the non-canonical automaton, this is a tricky case where, looking at the
# description of the state, it seems that only COMMA and RPAREN can follow
# here. But in fact, other tokens are possible, such as BAR, simply because
# they will NOT take us into this state. In the canonical automaton, the list
# of possibilities is explicit in the lookahead sets.
grammar: PERCENTPERCENT UID COLON UID LPAREN ACTION PREC UID UID
# In the first case above, we may expect a %prec annotation, whereas in the
# second case above, we have just seen it. In the error message, we merge
# these two situations and do not mention the possibility of a %prec
# annotation.

Either another production | ...
or a comma or a closing parenthesis
is expected at this point.

# ----------------------------------------------------------------------------

grammar: PERCENTPERCENT UID COLON PREC TYPE
grammar: PERCENTPERCENT UID COLON UID LPAREN ACTION PREC TYPE
grammar: PERCENTPERCENT UID COLON ACTION PREC TYPE

Ill-formed %prec annotation.
A symbol is expected at this point.
Examples of well-formed annotations:
  expr: MINUS e = expr %prec UMINUS { -e }

# ----------------------------------------------------------------------------

grammar: PERCENTPERCENT UID COLON UID LPAREN TYPE
grammar: PERCENTPERCENT UID COLON UID LPAREN UID COMMA TYPE

Ill-formed rule.
A comma-delimited list of actual parameters is expected at this point.
Examples of well-formed rules:
  call: f = callee LPAREN args = separated_list(COMMA, expr) RPAREN { f, args }
  list(X): { [] } | x = X; xs = list(X) { x :: xs }

# ----------------------------------------------------------------------------

grammar: PERCENTPERCENT UID COLON PREC LID UID

Ill-formed rule.
Either a semantic action { ... }
or another production | ...
is expected here.
Examples of well-formed rules:
  expr: MINUS e = expr %prec UMINUS { -e }

# ----------------------------------------------------------------------------

grammar: PERCENTPERCENT UID LPAREN UID RPAREN BAR

Ill-formed rule.
A colon is expected at this point.
Examples of well-formed rules:
  option(X): { None } | x = X { Some x }

# ----------------------------------------------------------------------------

grammar: PERCENTPERCENT UID COLON ACTION PREC UID TYPE

Either another rule
or another production | ...
is expected at this point.
Examples of well-formed rules:
  option(X): { None } | x = X { Some x }

# ----------------------------------------------------------------------------

grammar: TYPE OCAMLTYPE UID LPAREN UID LPAREN TYPE
grammar: PERCENTPERCENT UID COLON UID LPAREN UID LPAREN TYPE

Ill-formed list of actual parameters.
A comma-delimited list of actual parameters is expected at this point.
Examples of well-formed actual parameters:
  expr
  expr+
  option(expr)
  separated_list(COMMA, expr)

# Omitting the fact that an anonymous rule is a valid actual parameter...
# Also omitting the subtle distinctions between lax_actual, actual, etc.

# ----------------------------------------------------------------------------

grammar: TYPE OCAMLTYPE UID LPAREN UID PLUS UID

Ill-formed list of actual parameters.
A modifier, a closing parenthesis, or a comma is expected at this point.
A modifier is * or + or ?.
Examples of well-formed actual parameters:
  expr
  expr+
  option(expr)
  separated_list(COMMA, expr)

# ------------------------------------------------------------------------------

grammar: PERCENTATTRIBUTE TYPE
grammar: PERCENTATTRIBUTE UID COMMA TYPE
grammar: PERCENTATTRIBUTE UID TYPE
grammar: PERCENTATTRIBUTE UID PLUS TYPE
grammar: PERCENTATTRIBUTE UID LPAREN TYPE
grammar: PERCENTATTRIBUTE UID ATTRIBUTE UID

Ill-formed %attribute declaration.
An %attribute declaration should contain a nonempty list of symbols,
followed with a nonempty list of attributes.
Examples of well-formed declarations:
  %attribute FOO [@printer "foo"]
  %attribute bar BAZ [@printer "bar/BAZ"] [@cost 2.0]

# Local Variables:
# mode: shell-script
# End:
